buildscript {
	ext.kotlin_version = '1.4.10'
	ext.spring_boot_version = '2.1.8.RELEASE'
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
	}
}

project.ext {
//	JDBC_DATABASE_URL = getDatabaseUrl()
	version = "222.0"
}

apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'

jar {
	setArchivesBaseName("casher-bugtsa-resource-service")
	setVersion("0.0.2")
}

repositories {
	jcenter()
	mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.springframework.cloud:spring-cloud-starter-security")
	implementation("org.springframework.cloud:spring-cloud-starter-oauth2:2.1.4.RELEASE")

	implementation("org.springframework.cloud:spring-cloud-starter-config:2.1.4.RELEASE")

	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation ("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:$spring_boot_version")
	testImplementation("org.springframework.boot:spring-boot-starter-test")

	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'mysql:mysql-connector-java'

	compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

	compile 'javax.xml.bind:jaxb-api'
	compile 'org.hibernate:hibernate-core'
	compile 'org.hibernate:hibernate-entitymanager'
	compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.2.2'
}

task getDatabaseUrl() {
	def databaseUrl = null
	try {
		Properties properties = new Properties()
		properties.load(project.rootProject.file('local.properties')?.newDataInputStream())
		databaseUrl = properties.getProperty('databaseUrl')
	} catch (Exception ignored) {
		println("Warning: local.properties loading failed Sentry SberChat data")
	}
	project.ext.DATABASE_URL =  System.getenv('JDBC_DATABASE_URL') ?: databaseUrl
	version = "33432"
}

bootRun {
	dependsOn(getDatabaseUrl)
}